{"version":3,"sources":["useWordGame.js","App.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textAreaRef","useRef","useEffect","setTimeout","time","trim","split","filter","word","length","calculateWordCount","handleChange","event","value","target","startGame","current","disabled","focus","App","ref","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"sKAgDeA,MA9Cf,SAAqBC,GAAc,IAAD,EAENC,mBAAS,IAFH,mBAEvBC,EAFuB,KAEjBC,EAFiB,OAGYF,mBAASD,GAHrB,mBAGvBI,EAHuB,KAGRC,EAHQ,OAIYJ,oBAAS,GAJrB,mBAIvBK,EAJuB,KAIRC,EAJQ,OAKIN,mBAAS,GALb,mBAKvBO,EALuB,KAKZC,EALY,KAMxBC,EAAcC,iBAAO,MAoC3B,OAVAC,qBAAU,WACFN,GAAiBF,EAAgB,EACjCS,YAAW,WACPR,GAAiB,SAAAS,GAAI,OAAIA,EAAO,OAClC,KACuB,IAAlBV,IATXG,GAAiB,GACjBE,EAhBJ,SAA4BP,GAExB,OADiBA,EAAKa,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAc/BC,CAAmBlB,OAWlC,CAACE,EAAeE,IAEX,CAACI,cAAaW,aAlCrB,SAAsBC,GAAO,IAClBC,EAASD,EAAME,OAAfD,MACPpB,EAAQoB,IAgCuBrB,OAAMI,gBAAeF,gBAAeqB,UAxBvE,WACIlB,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,KACRM,EAAa,GACbC,EAAYgB,QAAQC,UAAW,EAC/BjB,EAAYgB,QAAQE,SAkB0DpB,c,OCZvEqB,MA7Bf,WAAe,IAAD,EAQI9B,EAAY,IANzBW,EAFS,EAETA,YACAW,EAHS,EAGTA,aACAnB,EAJS,EAITA,KACAI,EALS,EAKTA,cACAF,EANS,EAMTA,cACAqB,EAPS,EAOTA,UACAjB,EARS,EAQTA,UAED,OACI,gCACI,wDACA,0BACIsB,IAAKpB,EACLqB,SAAUV,EACVE,MAAOrB,EACPyB,UAAWrB,IAEf,kDAAqBF,KACrB,wBACQ4B,QAASP,EACTE,SAAUrB,EAFlB,yBAII,8CAAiBE,SCvBjCyB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a4138037.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\n\nfunction useWordGame(startingTime){\n\n    const [text, setText] = useState(\"\")\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    const [wordCount, setWordCount] = useState(0)\n    const textAreaRef = useRef(null)\n\n    function handleChange(event){\n        const {value} = event.target\n        setText(value)\n    }\n\n    function calculateWordCount(text){\n        const wordsArr = text.trim().split(\" \")\n        return wordsArr.filter(word => word !== \"\").length\n    }\n    \n    function startGame(){\n        setIsTimeRunning(true)\n        setTimeRemaining(startingTime)\n        setText(\" \")\n        setWordCount(0)\n        textAreaRef.current.disabled = false\n        textAreaRef.current.focus()\n\n    }\n    function endGame(){\n        setIsTimeRunning(false)\n        setWordCount(calculateWordCount(text))\n    }\n    \n    useEffect(() => {\n        if (isTimeRunning && timeRemaining > 0){\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            },1000)\n        } else if (timeRemaining === 0){\n            endGame()\n        }\n    },[timeRemaining, isTimeRunning]) \n\n    return {textAreaRef, handleChange, text, isTimeRunning, timeRemaining, startGame, wordCount}\n\n}\n\nexport default useWordGame ","import React from \"react\";\nimport useWordGame from \"./useWordGame\"\n\nfunction App(){\n const {\n     textAreaRef, \n     handleChange, \n     text, \n     isTimeRunning, \n     timeRemaining, \n     startGame, \n     wordCount} = useWordGame(15)\n\n    return(\n        <div>\n            <h1>How fast do you type? </h1>\n            <textarea \n                ref={textAreaRef}\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h4>Time remaining: {timeRemaining}</h4>\n            <button\n                    onClick={startGame}\n                    disabled={isTimeRunning}\n                >START GAME!</button>\n                <h1>Word Count: {wordCount}</h1>\n            </div>\n\n    )\n};\nexport default App ;\n\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App.js\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}